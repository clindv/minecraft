(ns minecraft.control-test
  (:require [clojure.test :refer :all]
            [minecraft.control :refer :all]
            [minecraft.time :refer :all]))
(def wasd {:press {87 (fn [x] (fn [] (reset! (x :velocity-y) -1)))
                   65 (fn [x] (fn [] (reset! (x :velocity-x) -1)))
                   83 (fn [x] (fn [] (reset! (x :velocity-y) 1)))
                   68 (fn [x] (fn [] (reset! (x :velocity-x) 1)))}
           :release {87 (fn [x] (fn [] (reset! (x :velocity-y) 0)))
                     65 (fn [x] (fn [] (reset! (x :velocity-x) 0)))
                     83 (fn [x] (fn [] (reset! (x :velocity-y) 0)))
                     68 (fn [x] (fn [] (reset! (x :velocity-x) 0)))}})
(deftest keyboard-test
  (testing "keyboard"
    (let [hero {:id (atom "clindv")
                :velocity-x (atom 0)
                :velocity-y (atom 0)}]
      (is (stroke :press 87))
      (is (= 0 @(hero :velocity-y)))
      (is (not (stroke :press 87)))
      (is @((keyboard :tick) 87))
      (stroke :release 87)
      (is (not @((keyboard :tick) 87)))
      (unleash hero)
      (unleash wasd)
      (stroke :press 87)
      (leash hero wasd)
      (is (= 0 @(hero :velocity-y)))
      (stroke :press 87)
      (is (= 0 @(hero :velocity-y)))
      (stroke :release 87)
      (is (= 0 @(hero :velocity-y)))
      (stroke :press 87)
      (is (= -1 @(hero :velocity-y)))
      (unleash hero wasd)
      (is @((keyboard :tick) 87))
      (stroke :release 87)
      (is (= -1 @(hero :velocity-y)))
      (is (not @((keyboard :tick) 87)))
      (leash hero wasd)
      (stroke :release 87)
      (is (= -1 @(hero :velocity-y)))
      (stroke :press 87)
      (stroke :release 87)
      (is (= 0 @(hero :velocity-y)))
      (unleash hero wasd)
      (stroke :press 87)
      (is (= 0 @(hero :velocity-y)))
      (leash hero wasd)
      (unleash wasd hero)
      (stroke :press 87)
      (is (= 0 @(hero :velocity-y)))
      (stroke :release 87)
      )))
